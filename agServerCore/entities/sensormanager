var document = require("document");
var log = require("log"); log.setLevel("info");
var sensorModule = require("./sensor");

/**
 * @class SensorManager
 * @constructor
 */
function SensorManager() {
    
}

/**
 * Create a new Sensor instance and persist it
 * @method createSensor
 * @param {Object} [dto]: sensor's data
 * @param {String} [dto.controller]
 * @param {String} [dto.sensor_type]
 * @param {String} [dto.sensor_core] 
 * @param {String} [dto.sensorid] 	
 * @param {String} [dto.port] 	
 * @return {Object} {key, version}
 * @throws {Error}
 */
SensorManager.prototype.createSensor = function(dto) {
    
    
};

/**
 * @method getSensor
 * @param {String} sensorid
 * @return {Object} leightweight instance of Sensor (no sensor_core and no sensor_type data)
 * @throws {Error}
 */
SensorManager.prototype.getSensor = function(sensorid) {
  
    if (!sensorid) {
        
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "SensorManager.getSensor: sensorid cannot be null or empty"
        };
    }
    
    var queryParam = {
        query: 'sensorid="'+ sensorid + '" and apsdb.schema="' + SENSOR + '"',
        fields: "*"
    };
    
    var resp = document.query(queryParam);
    if (resp.metadata.status == "failure") {
        throw resp.metadata;
    }
    
    if (!resp.result.documents[0]){
        
        throw {
            errorCode: "Entity_Not_Found",
            errorDetail: "SensorManager.getSensor: could not find sensor with id " + id
        };
    }
    
    return new sensorModule.Sensor(resp.result.documents[0]);
};

