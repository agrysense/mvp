var document = require("document");
var log = require("log"); log.setLevel("info");
var controllerModule = require("./controller");
var cameraModule = require("./camera");
var sensorModule = require("./sensor");
var sensorCoreModule = require("./sensorCore");
var actuatorModule = require("./actuator");
var equipmentModule = require("./equipment");
var managerModule = require("../manager");

const CONTROLLER = "Controller";
const CAMERA = "Camera";
const SENSOR = "Sensor";
const SENSORCORE = "SensorCore";
const ACTUATOR = "Actuator";
const EQUIPMENT = "Equipment";

/**
 * Defines the DeviceManager Controller class
 * @class DeviceManager
 * @constructor
 */
function DeviceManager() {
};

DeviceManager.prototype = new managerModule.Manager();
DeviceManager.prototype.constructor = DeviceManager;

/**
 * lists all available controllers
 *
 * @method listControllers
 * @param {Object} [dto]
 * @param {String} [dto.structure]: the identifier of the structure (e.g. farmhouse) where the controllers are deployed, optional
 * @return {JSONArray<Controller>} 
 * @throws {Error}
 */
DeviceManager.prototype.listControllers = function(dto) {

    var queryParam = {
        query: 'apsdb.schema="' + CONTROLLER + '"',
        fields: "*",
        count: true,
        resultsPerPage: (!dto || !dto.resultsPerPage) ? 50 : dto.resultsPerPage,
        pageNumber: (!dto || !dto.pageNumber) ? 1 : dto.pageNumber
    };

    if (dto && dto.structure) {        
        queryParam.query += ' and structure="'+ dto.structure + '"'; 
    }

    var resp = document.query(queryParam);
    if (resp.metadata.status == "failure") {
        throw resp.metadata;
    }

    if (!resp.result.documents){
        throw {
            errorCode: "Entity_Not_Found",
            errorDetail: "DeviceManager.listControllers: could not find controllers"
        };
    }

    var result = [];
    for (var i=0; i < resp.result.documents.length; i++) {        
        result.push(new controllerModule.Controller(resp.result.documents[i], this));
    }
    return result;
}

/**
 * get Controller based on controllerid (key)
 * @method getController
 * @param {String} controllerid: the id of the controller
 * @return {Controller}
 * @throws {Error}
 */
DeviceManager.prototype.getController = function(controllerid) {
	
    var doc = this.getObject(controllerid, "getController");
    return new controllerModule.Controller(doc, this);
}

/**
 * updates a Controller object. If it doesn't exist, the method creates it
 * @method updateController
 * @param {Object} [dto]: controller data. If [dto.key] or [dto.id] is not provided, will create a new controller in store
 * @return {Object}
 * @throws {Error}
 */
DeviceManager.prototype.updateController = function(dto) {
	return this.updateObject(dto, CONTROLLER, "updateController");
};

/**
 * Delete a controller from the store
 * @method deleteController
 * @param {String} controllerid: the controller id (key)
 * @return {Object}
 * @throws {Error}
 */
DeviceManager.prototype.deleteController = function(controllerid) {
    this.deleteObject(controllerid, "deleteController");
}

/**
 * lists available cameras according to the given search criteria
 * @param {Object} [dto]
 * @param {String} [dto.controller]: the identifier of the controller to which pertains the camera (optional)
 * @param {Number} [dto.resultsPerPage]: how many results to return per call (optional, defaults to 50)
 * @param {Number} [dto.pageNumber]: the page number in case there are more than one pages of results (optional, defaults to 1)
 * @return {JSONArray<Camera>} 
 * @throws {Error}
 */
DeviceManager.prototype.listCameras = function(dto) {

    dto = dto ? dto : {};
    var queryParam = {
        query: 'apsdb.schema="' + CAMERA + '"',
        fields: "*",
        count: true,
        resultsPerPage: (!dto || !dto.resultsPerPage) ? 50 : dto.resultsPerPage,
        pageNumber: (!dto || !dto.pageNumber) ? 1 : dto.pageNumber
    };

    if (dto.controller) {
        queryParam.query +=  ' and controller="'+ dto.controller + '"';
    }

    var resp = document.query(queryParam);
    if (resp.metadata.status == "failure") {
        throw resp.metadata;
    }

    if (!resp.result.documents){
        throw {
            errorCode: "Entity_Not_Found",
            errorDetail: "DeviceManager.listCameras: could not find cameras"
        };
    }

    var result = [];
    for (var i=0; i < resp.result.documents.length; i++) {

        var camera = new cameraModule.Camera(resp.result.documents[i]); 
        result.push(camera);
    }

    return result;
};

/**
 * get Camera based on key
 * @method getCamera
 * @param {String} id
 * @return {Camera}
 * @throws {Error}
 */
DeviceManager.prototype.getCamera = function(id) {
	
    var doc = this.getObject(id, "getCamera");
    return new cameraModule.Camera(doc);
};

/**
 * updates a Camera object. If it doesn't exist, the method creates it
 * @method updateCamera
 * @param {Object} [dto]: camera related data
 * @return {Object}
 * @throws {Error}
 */
DeviceManager.prototype.updateCamera = function(dto) {
    return this.updateObject(dto, CAMERA, "updateCamera");
};

/**
 * flags a Camera as deleted
 *
 * @method deleteCamera
 * @param {String} id
 * @return {Object}
 * @throws {Error}
 */
DeviceManager.prototype.deleteCamera = function(id) {
    this.deleteObject(id, "deleteCamera");
};

/**
 * lists available sensors
 * @method listSensors
 * @param {Object} [dto] optional search criteria and pagination
 * @param {String} [dto.controller]: the identifier of the controller to which pertains the sensors (optional)
 * @param {Number} [dto.resultsPerPage]: how many results to return per call (optional, defaults to 50)
 * @param {Number} [dto.pageNumber]: the page number in case there are more than one pages of results (optional, defaults to 1)
 * @return {JSONArray<Sensor>} 
 * @throws {Error}
 */
DeviceManager.prototype.listSensors = function(dto) {

    dto = dto ? dto : {};
    var queryParam = {
       
        query: 'apsdb.schema="' + SENSOR + '"',
        fields: "*",
        count: true,
        resultsPerPage: (!dto || !dto.resultsPerPage) ? 50 : dto.resultsPerPage,
        pageNumber: (!dto || !dto.pageNumber) ? 1 : dto.pageNumber
    };
    
    if (dto.controller) {
         queryParam.query += ' and controller="'+ dto.controller + '"';
    }

    var resp = document.query(queryParam);
    if (resp.metadata.status == "failure") {
        throw resp.metadata;
    }

    if (!resp.result.documents){
        throw {
            errorCode: "Entity_Not_Found",
            errorDetail: "DeviceManager.listSensors: could not find sensors"
        };
    }

    var result = [];
    for (var i=0; i < resp.result.documents.length; i++) {
        result.push(new sensorModule.Sensor(resp.result.documents[i]));
    }

    return result;
};

/**
 * get Sensor
 * @method getSensor
 * @param {String} id: the key (identifier) of the sensor
 * @return {Sensor}
 * @throws {Error}
 */
DeviceManager.prototype.getSensor = function(id) {
    
	var doc = this.getObject(id, "getSensor");
    return new sensorModule.Sensor(doc);
};

/**
 * updates a Sensor object. If it doesn't exist, the method creates it
 * @method updateSensor
 * @param {Object} dto: sensor data or Sensor instance
 * @return {Object}
 * @throws {Error}
 */
DeviceManager.prototype.updateSensor = function(dto) {
	return this.updateObject(dto, SENSOR, "updateSensor");
};

/**
 * flags a Sensor as deleted
 * @method deleteSensor
 * @param {String} id
 * @return {Object}
 * @throws {Error}
 */
DeviceManager.prototype.deleteSensor = function(id) {
     this.deleteObject(id, "deleteSensor");
};

/**
 * lists all available sensorcores
 * @method listSensorCores
 * @param {Object} [dto] optional search criteria and pagination
 * @param {String} [dto.controller]: the identifier of the controller under a sensor core (optional)
 * @param {Number} [dto.resultsPerPage]: how many results to return per call (optional, defaults to 50)
 * @param {Number} [dto.pageNumber]: the page number in case there are more than one pages of results (optional, defaults to 1)
 * @return {JSONArray<SensorCore>} 
 * @throws {Error}
 */
DeviceManager.prototype.listSensorCores = function(dto) {
    
    var queryParam = {
        
        query: 'apsdb.schema="' + SENSORCORE + '"',
        fields: "*",
        count: true,
        resultsPerPage: (!dto || !dto.resultsPerPage) ? 50: dto.resultsPerPage,
        pageNumber: (!dto || !dto.pageNumber) ? 1 : dto.pageNumber
    };

    if (dto && dto.controller) {
        queryParam.query += ' and controller="'+ dto.controller + '"';
    }
    
    var resp = document.query(queryParam);
    if (resp.metadata.status == "failure") {
        throw resp.metadata;
    }

    if (!resp.result.documents){
        throw {
            errorCode: "Entity_Not_Found",
            errorDetail: "DeviceManager.listSensorCores: could not find sensorcores"
        };
    }

    var result = [];
    for (var i=0; i < resp.result.documents.length; i++) {        
        result.push(new sensorCoreModule.SensorCore(resp.result.documents[i]));
    }
    return result;
};

/**
 * get SensorCore
 * @method getSensorCore
 * @param {String} id
 * @return {SensorCore}
 * @throws {Error}
 */
DeviceManager.prototype.getSensorCore = function(id) {
    
    var doc = this.getObject(id, "getSensorCore");
    return new sensorCoreModule.SensorCore(doc);
};

/**
 * updates a SensorCore object. If it doesn't exist, the method creates it
 * @method updateSensorCore
 * @param {Object} [dto]  sensor core data or SensorCore instance
 * @return {Object}
 * @throws {Error}
 */
DeviceManager.prototype.updateSensorCore = function(dto) {
    return this.updateObject(dto, SENSORCORE, "updateSensorCore");
};

/**
 * flags a SensorCore as deleted
 * @method deleteSensorCore
 * @param {String} id: the identifier (key) of the sensor core onject
 * @return {Object}
 * @throws {Error}
 */
DeviceManager.prototype.deleteSensorCore = function(id) {
    return this.deletObject(id, "deleteSensorCore");
};

/**
 * lists all available actuators
 * @method listActuators
 * @param {Object} [dto]: optional search criteria and pagination data
 * @param {String} [dto.controller]: the identifier of the controller to which pertains the sensors (optional)
 * @param {Number} [dto.resultsPerPage]: how many results to return per call (optional, defaults to 50)
 * @param {Number} [dto.pageNumber]: the page number in case there are more than one pages of results (optional, defaults to 1)
 * @return {JSONArray<Actuator>} 
 * @throws {Error}
 */
DeviceManager.prototype.listActuators = function(dto) {
    
    var queryParam = {
        
        query: 'apsdb.schema="' + ACTUATOR + '"',
        fields: "*",
        count: true,
        resultsPerPage: (!dto || !dto.resultsPerPage) ? 50 : dto.resultsPerPage,
        pageNumber: (!dto || !dto.pageNumber) ? 1 : dto.pageNumber
    };
    
    if (dto && dto.controller) {        
        queryParam.query += ' and controller="'+ dto.controller + '"'; 
    }

    var resp = document.query(queryParam);
    if (resp.metadata.status == "failure") {
        throw resp.metadata;
    }

    if (!resp.result.documents){
        throw {
            errorCode: "Entity_Not_Found",
            errorDetail: "DeviceManager.listActuators: could not find actuators"
        };
    }

    var result = [];
    for (var i=0; i < resp.result.documents.length; i++) {
        result.push(new actuatorModule.Actuator(resp.result.documents[i]));
    }
    
    return result;
};

/**
 * get Actuator based on id
 * @method getActuator
 * @param {String} id: the actuator id
 * @return {Actuator}
 * @throws {Error}
 */
DeviceManager.prototype.getActuator = function(id) {
    
	var doc = this.getObject(id, "getActuator");
    return new actuatorModule.Actuator(doc);
};

/**
 * updates a Actuator object. If it doesn't exist, the method creates it
 * @method updateActuator
 * @param {Object} [dto] data about the actuator to update or instance of Actuator
 * @return {Object}
 * @throws {Error}
 */
DeviceManager.prototype.updateActuator = function(dto) {
    return this.updateObject(dto, ACTUATOR, "updateActuator");
};

/**
 * flags a Actuator as deleted
 * @method deleteActuator
 * @param {String} id (key)
 * @return {Object}
 * @throws {Error}
 */
DeviceManager.prototype.deleteActuator = function(id) {
    this.deleteObject(id, "deleteActuator");
};

/**
 * lists all available equipments
 * @method listEquipments
 * @param {Object} [dto]: optional filter and pagination data
 * @param {String} [dto.structure] : the structure under which this equipment is available (optional)
 * @param {Number} [dto.resultsPerPage]: how many results to return per call (optional, defaults to 50)
 * @param {Number} [dto.pageNumber]: the page number in case there are more than one pages of results (optional, defaults to 1)
 * @return {JSONArray<Actuator>} 
 * @throws {Error}
 */
DeviceManager.prototype.listEquipments = function(dto) {
    
    var queryParam = {
        
        query: 'apsdb.schema="' + EQUIPMENT + '"',
        fields: "*",
        count: true,
        resultsPerPage: (!dto || !dto.resultsPerPage) ? 50 : dto.resultsPerPage,
        pageNumber: (!dto || !dto.pageNumber) ? 1 : dto.pageNumber
    };
    
    if (dto && dto.structure) {        
        queryParam.query += ' and structure="'+ dto.structure + '"'; 
    }

    var resp = document.query(queryParam);
    if (resp.metadata.status == "failure") {
        throw resp.metadata;
    }

    if (!resp.result.documents){
        
        throw {
            errorCode: "Entity_Not_Found",
            errorDetail: "DeviceManager.listEquipments: could not find equipments"
        };
    }

    var result = [];
    for (var i=0; i < resp.result.documents.length; i++) {
        result.push(new equipmentModule.Equipment(resp.result.documents[i]));
    }
    
    return result;
};

/**
 * get Equipement based on id
 * @method getEquipment
 * @param {String} id: the equipment id
 * @return {Actuator}
 * @throws {Error}
 */
DeviceManager.prototype.getEquipment = function(id) {
    return new equipmentModule.Equipment(this.getObject(id));
};

/**
 * updates an Equipment object. If it doesn't exist, the method creates it
 * @method updateEquipment
 * @param {Object} [dto] data about the equipment to update or instance of Equipment
 * @return {Object}
 * @throws {Error}
 */
DeviceManager.prototype.updateEquipment = function(dto) {
    return this.updateObject(dto, EQUIPMENT, "updateEquipment");
};

/**
 * flags a Actuator as deleted
 *
 * @method deleteActuator
 * @param {String} id
 * @return {Object}
 * @throws {Error}
 */
DeviceManager.prototype.deleteEquipement = function(id) {
    return this.deleteObject(id, "deleteEquipment");
};