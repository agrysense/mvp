/**
 * Removes scriptr.io's metadata from a document
 * @function removeMetaData
 * @param {Object} doc: scriptr.io document
 * @return {Object}
 */
function removeMetaData(doc) {

    var exclude = ["versionNumber", "creator", "lastModifiedDate", "lastModifiedBy", "creationDate", "schema", "latest", "meta.types", "meta.schema", "rootkey"];

    var newDoc = {};
    if (doc) {

        for (var key in doc) {

            if (key == "key") {
                newDoc.id = doc.key;
            }

            if (key.indexOf("apsdb") == -1 && exclude.indexOf(key) == -1) {
                newDoc[key] = doc[key];
            }        
        }
    }

    return newDoc;
}

/**
 * Returns the rounded number of days between two dates
 * @function daysBetween
 * @param {Date} start (can be a string date)
 * @param {Date} end (can be a string date), optional, defaults to current date
 */
function daysBetween(start, end) {
 
    if (!start) {

        throw {
            error: "Missing_Parameter",
            errorDetail: "You should provide a start date at least"
        };
    }

    var startDate = (start instanceof Date) ? start : new Date(start);
    var endDate = end;
    if (endDate) {
       endDate = (endDate instanceof Date) ? endDate : new Date(endDate);
    }else {
        endDate = new Date();
    }
    
    startDate = startDate.getTime(); 
    endDate = endDate.getTime(); 
    var lap = Math.abs(endDate - startDate) / (1000 * 60 * 60 * 24);
    return Math.round(lap);
}

/**
 * @function toShortDate
 * @param {Date} date. If not provided, uses current date
 * @return {String} YYYY-MM-DD
 */
function toShortDate(date) {

    var useDate = null;
    if (date) {
        useDate = (date instanceof Date) ? date : new Date(date); 
    }else {
        useDate = new Date();
    }

    var dateStr = useDate.toISOString();
    dateStr = dateStr.substring(0, dateStr.indexOf("T"));
    return dateStr;
}

/**
 * @function toLongDate
 * @param {Date} date, if not provided defaults to current date
 * @return {String} YYYY-MM-DDTHH:mm:ss
 */
function toLongDate(date) {

    var useDate = null;
    if (date) {
        useDate = (date instanceof Date) ? date : new Date(date); 
    }else {
        useDate = new Date();
    }

    var dateStr = useDate.toISOString();
    dateStr = dateStr.substring(0, dateStr.indexOf("."));
    return dateStr + "+0000";
}

/**
 * Checks if the body of a request needs to be parsed into JSON. Used by API operations.
 * @function parse
 * @param {Object} data: the request's body, could be a string, if so it will be parsed
 * @return {Object}
 * @throw {Error}
 */
function parse(data) {

    var obj = data;
    var error = {

        status: "failure",
        errorCode: "Missing_Parameter",
        errorDetail: "You need to send the data in the request's body as a JSON object"
    };

    if (!data) {
        throw error;       
    }

    if (typeof(data) == "string") {

        try {
            obj = JSON.parse(request.rawBody);
        }catch(exception){
            throw error;
        }
    }

    return obj;
}
