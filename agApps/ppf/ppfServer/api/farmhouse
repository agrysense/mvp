/**
 * FarmHouse API. Defines CRUD operations to manipulate farmhouses
 * When creating a new farmhouse, send a POST request and pass the farmhouse's data in the request's body as JSON (../api/farmhouse)
 * When updating a farmhouse, send a PUT request and pass the farmhouse's data in the request's body as JSON (.../api/farmhouse/123456)
 * When getting a farmhouse, send a GET request and pass the farmhouse id at the end of the path (e.g. ".../api/farmhouse/123456")
 * When listing farmhouses, send a GET request. Optionally, you can pass farm (id), pagNumber and resultsPerPage as parameters
 * When deleting a farmhouse, send a DELETE request and pass the farmhouse id at the end of the path (e.g. ".../api/farmhouse/1234567")
 * To list the cycles of a farmhouse, send a GET request to "../api/farmhouse/farmhouse_id/cycle"
 * To get a specific cycle, send a GET request to "../api/farmhouse/farmhouse_id/cycle/cycleid"
 * To start a cycle, send a PUT request to "../api/farmhouse/farmhouse_id/cycle"
 * To update a cycle, send a PUT request to "../id/farmhouse/farmhouse_id/cycle/cycleid"  + cycle data in JSON body
 * To stop the current cycle, send a DELETE request to "../api/farmhouse/farmhouse_id/cycle"
 * @module farmhouse
 */

var util = require("/agServerCore/lib/util");
var farmhouseManagerModule = require("/agApps/ppf/ppfServer/entities/farmhouses/farmhouseManager");

var pathInfo = request.pathInfo ? request.pathInfo.split("/") : "";
var id = pathInfo.length > 0 ? pathInfo[0] : null;
var cycleReq = pathInfo.length > 1 && pathInfo[1] == "cycle" ? true : false;
var cycleId = pathInfo.length > 2 ? pathInfo[2] : null; 

var method = request.method;

var farmhouseManager = new farmhouseManagerModule.FarmhouseManager();

try {

    switch(method.toLowerCase()) {

        case "get": {
            return resolveGet();
        };break;
        case "post": { 

            var body =  util.parse(request.body ? request.body : request.rawBody);
            return createFarmhouse(body);
        };break;
        case "put": {

            var body =  util.parse(request.body ? request.body : request.rawBody);
            return resolvePut(body);
        };break;
        case "delete": {
            return resolveDelete();
        };break;
        default: throw {

            errorCode: "Invalid_Method",
            errorDetail: method + " is not supported by the API"
        }
    };
}catch(exception){
    return exception;
}


function resolveGet() {

    if (!id) {
        return listFarmhouses(request.parameters);
    }

    if (id && !cycleReq) {
        return getFarmhouse(id);
    }

    if (cycleReq && !cycleId) {
        return listCycles(id);
    }

    if (cycleReq && cycleId) {
        return getCycle(cycleId); 
    }
}

function resolvePut(body) {

    if (!id) {
        return createFarmhouse(body);
    }

    if (id && !cycleReq) {
        return updateFarmhouse(id, body);
    }

    if (cycleReq && !cycleId) {
        return startCycle(id, body);
    }

    if (cycleReq && cycleId) {
        return updateCycle(id, cycleId, body); 
    }
}

function resolveDelete() {

    if (id && !cycleReq) {
        return deleteFarmhouse(id);
    }

    if (cycleReq) {
        return stopCycle(id);
    }    
}

/**
 * @function listFarmhouses
 * @param {Object} [params]
 * @param {String} [params.farm]: the identifier of a farm (optional, when passed, only list the farmhouses of this farm)
 * @param {Number} [params.pageNumer]: number of the page to return when paginating (optional, defaults to 1)
 * @param {Number} [params.resultsPerPage]: max number of results in one page (optional, defaults to 50)
 * @return {Array}
 */
function listFarmhouses(params) {
    return farmhouseManager.listFarmhouses(params);
}

/**
 * @function getFarmhouse
 * @param {String} id: identifier of the farmhouse
 * @return {Object}
 */
function getFarmhouse(id) {
    return farmhouseManager.getFarmhouse(id);
}

/**
 * @function createFarmhouse
 * @param {Object} [data]: farmhouse data
 * @return {Object} {key: the identifier of the farm house, version: document version}
 */
function createFarmhouse(data) {
    return farmhouseManager.updateFarmhouse(data);
}

/**
 * @function updateFarmhouse
 * @param {Object} [data]: farmhouse data
 * @return {Object} {key: the identifier of the farmhouse, version: document version}
 */
function updateFarmhouse(id, data) {

    data.key = id;
    return farmhouseManager.updateFarmhouse(data);
}

/**
 * @function deleteFarmhouse
 * @param {String} id: identifier of the farm
 * @return {Object}
 */
function deleteFarmhouse(id) {
    return farmhouseManager.deleteFarmhouse(id);
}

/**
 * @function listCycles
 * @param {String} farmhouseid: the identifier of the farmhouse
 */
function listCycles(farmhouseid) {
    return farmhouseManager.listCycles({farmhouse:farmhouseid});
}

/**
 * @function getCycle
 * @param {String} cycleid: the identifier of the cycle
 */
function getCycle(cycleid) {
    return farmhouseManager.getCycle(cycleid);
}

/**
 * @function startCycle
 * @param {String} {id}: farmhouse id
 * @return {String} identifier of the cycle
 */
function startCycle(id, data) {

    var farmhouse = getFarmhouse(id);
    data.farmhouse = id;
    return farmhouse.startCycle(data);
}

/**
 * @function updateCycle
 * @param {String} {id}: farmhouse id
 * @param {String} {cycleId}: cycle id
 * @param {Object} [data]: cycle data
 * @return {String} the identifier of the cycle
 */
function updateCycle(id, cycleId, data) {

    var farmhouse = getFarmhouse(id);
    data.key = cycleId;
    return farmhouse.updateCycle(data);
}

/**
 * @function startCycle
 * @param {String} {id}: farmhouse id
 * @return {String} identifier of the cycle
 */
function stopCycle(id) {

    var farmhouse = getFarmhouse(id);
    return farmhouse.stopCycle();
}