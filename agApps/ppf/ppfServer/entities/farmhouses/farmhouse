var document = require("document");
var log = require("log"); log.setLevel("info");
var componentModule = require("/agServerCore/entities/component");
var cycleModule = require("./cycle");
var util = require("/agServerCore/lib/util");

var farmhouseid = null;
var farm = null;
var name = null;
var location = null;
var gps = null;
var description = null;
var category = null;
var length = null;
var width = null;

/**
 * Defines the Farmhouse object
 *
 * @class Farmhouse
 * @constructor
 * @param {Object} [dto] a document containing Farmhouse data
 * @param {FarmhouseManager} farmhouseManager instance of FarmhouseManager
 */
function Farmhouse(dto, farmhouseManager) {

    componentModule.Component.call(this, dto);
    if (!dto.key) {   
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "Farmhouse: dto.id or dto.key cannot be null or empty"
        };
    }

    if (!farmhouseManager) {   
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "Farmhouse: farmhouseManager cannot be null or undefined"
        };
    }

    this.farmhouseManager = farmhouseManager;
    this.deviceManager = this.farmhouseManager.getDeviceManager();
}

Farmhouse.prototype = new componentModule.Component({inheritance: true});
Farmhouse.prototype.constructor = Farmhouse;


/**
 * lists all available controllers under this farmhouse
 * @method listControllers
 * @param {Object} [dto] optional filtering and pagination parameters
 * @return {JSONArray<Controller>}
 * @throws {Error}
 */
Farmhouse.prototype.listControllers = function(dto) {

    var searchDto = dto ? dto : {};
    searchDto.structure = this.key;    
    return this.deviceManager.listControllers(searchDto);
};

/**
 * Retrive a given controller under this farmhouse
 * @method getController
 * @param {String} id: the controller id (key)
 * @return {Controller}
 * @throws {Error}
 */
Farmhouse.prototype.getController = function(id) {
    return this.deviceManager.getController(id);
};

/**
 * Assign a controller to this farmhouse instance. If the controller did not exist in the store, it is created
 * To unassign a controller you need to assign it to another farmhouse
 * @method addController
 * @param {Object} [dto]: instance of Controller or Controller data
 * @return {Object}
 * @throw {Error}
 */
Farmhouse.prototype.addController = function(dto) {

    if (!dto) {

        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "Farmhouse.addController: dto cannot be null or undefined"
        };
    }

    dto.structure = this.key;
    return this.deviceManager.updateController(dto);
};

/**
 * List all equipments under this farmhouse
 * @method listEquipments
 * @param {Object} [dto]: optional filtering and pagination parameters
 * @param {Number} [dto.resultsPerPage]: how many results to return per call (optional, defaults to 50)
 * @param {Number} [dto.pageNumber]: the page number in case there are more than one pages of results (optional, defaults to 1)
 * @return {Object}
 * @throw {Error}
 */
Farmhouse.prototype.listEquipments = function(dto) {

    var searchDto =  dto ? JSON.parse(JSON.stringify(dto)) : {};
    searchDto.structure = this.key;
    return this.deviceManager.listEquipments(searchDto);
};

/**
 * Retrive a given equipment under this farmhouse
 * @method getEquipment
 * @param {String} id: the equipment id (key)
 * @return {Equipment}
 * @throws {Error}
 */
Farmhouse.prototype.getEquipment = function(id) {
    return this.deviceManager.getEquipment(id);
};

/**
 * Assign an equipment to this farmhouse instance. If the equipment did not exist in the store, it is created
 * To unassign a equipment you need to assign it to another farmhouse
 * @method addController
 * @param {Object} [dto]: instance of Controller or Controller data
 * @return {Object}
 * @throw {Error}
 */
Farmhouse.prototype.addEquipment = function(dto) {

    if (!dto) {

        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "Farmhouse.addEquipement: dto cannot be null or undefined"
        };
    }

    dto.structure = this.key;
    return this.deviceManager.updateEquipment(dto);
};

/**
 * Start a new cycle. There should be no other ongoing cycle.
 * @method startCycle
 * @param {Object} [dto]: cycle data
 * @param {String} [dto.startDate]: cycle start date (YYYY-MM-DD). Optional, defaults to current date
 * @param {String} [dto.endtDate]: cycle end date (YYYY-MM-DD). Optional 
 * @param {Number} [dto.birdNbrIn]: initial count of birds in the cyle
 * @param {Number} [dto.currentBirdCount]: current count of birds in the cyle, optional. Defaults to initial count 
 * @param {String} [dto.endBirdCount]: end count of birds in the cyle, optional. Defaults to initial count
 * @return {Object}
 * @throws {Error}
 */
Farmhouse.prototype.startCycle = function(dto) {

    var currentCycle = this.getCurrentCycle(); console.log(JSON.stringify("current cycle " + currentCycle))
    if (currentCycle && currentCycle.endDate) {

        throw {
            errorCode: "Invalid_Action",
            errorDetail: "Farmhouse.startCycle: a cycle (" + currentCycle.key + ") is already ongoing"
        };
    }

    if (!dto || !dto.birdNbrIn) {
        
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "Farmhouse.startCycle: dto.birdNbrIn has to be specified"
        };
    }
    
    var data = JSON.parse(JSON.stringify(dto));
    data.farmhouse = this.key;
    data.startDate = dto && dto.startDate ? util.toShortDate(dto.startDate) : util.toShortDate();
    data.currentBirdCount = dto && dto.currentBirdCount ? dto.currentBirdCount : this.birdNbrIn;
    data.endBirdCount = dto && dto.endBirdCount ? dto.endBirdCount : this.birdNbrIn;
    return this.farmhouseManager.updateCycle(data);
};

/**
 * Get the current cycle. There should be no other ongoing cycle
 * @method getCycle
 * @return {Object} cycle or null if no cycle is started
 * @throw {Error}
 */
Farmhouse.prototype.getCurrentCycle = function() {

    var dto = {

        farmhouse: this.key,
        resultsPerPage: 1,
        filterExp: " endDate<date> is not null",
        sortExp: "startDate<date:DESC>"
    };

    var cycleList = null;
    try {
        cycleList = this.farmhouseManager.listCycles(dto);
    }catch(exception){
        log.info("Farmhouse.getCurrentCycle:\n" + JSON.stringify(exception));
    }

    if (cycleList.length > 0) {
        return new cycleModule.Cycle(cycleList[0]);
    }else{
        return null;
    }
};

/**
 * Stop the current cycle if a cycle was started. Otherwise, throws an exception 
 * @method stopCycle
 * @return {Cycle} the current cycle object that was stopped
 * @throw {Error}
 */
Farmhouse.prototype.stopCycle = function() {

    var currentCycle = this.getCurrentCycle();
    if (!currentCycle) {

        throw {
            error: "Invalid_Action",
            errorDetail: "No cycle was started for this farmhouse: " + this.key
        };
    }

    return currentCycle.stop();
};

