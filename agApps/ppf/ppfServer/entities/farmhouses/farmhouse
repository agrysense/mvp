var document = require("document");
var log = require("log"); log.setLevel("info");
var componentModule = require("/agServerCore/entities/component");
var cycleModule = require("./cycle");
var util = require("/agServerCore/lib/util");

var farmhouseid = null;
var farm = null;
var name = null;
var location = null;
var gps = null;
var description = null;
var category = null;
var length = null;
var width = null;

/**
 * Defines the Farmhouse object
 *
 * @class Farmhouse
 * @constructor
 * @param {Object} [dto] a document containing Farmhouse data
 * @param {FarmhouseManager} farmhouseManager instance of FarmhouseManager
 */
function Farmhouse(dto, farmhouseManager) {

    componentModule.Component.call(this, dto);
    if (!dto.key) {   
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "Farmhouse: dto.id or dto.key cannot be null or empty"
        };
    }

    if (!farmhouseManager) {   
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "Farmhouse: farmhouseManager cannot be null or undefined"
        };
    }

    this.cycleKey = this.key + "_Cycle";
    this.startCycleKey = this.key + "Starting_Cycle";
    this.farmhouseManager = farmhouseManager;
    this.deviceManager = this.farmhouseManager.getDeviceManager();
}

Farmhouse.prototype = new componentModule.Component({inheritance: true});
Farmhouse.prototype.constructor = Farmhouse;


/**
 * lists all available controllers under this farmhouse
 * @method listControllers
 * @param {Object} [dto] optional filtering and pagination parameters
 * @return {JSONArray<Controller>}
 * @throws {Error}
 */
Farmhouse.prototype.listControllers = function(dto) {

    var searchDto = dto ? dto : {};
    searchDto.structure = this.key;    
    return this.deviceManager.listControllers(searchDto);
};

/**
 * Retrive a given controller under this farmhouse
 * @method getController
 * @param {String} id: the controller id (key)
 * @return {Controller}
 * @throws {Error}
 */
Farmhouse.prototype.getController = function(id) {
    return this.deviceManager.getController(id);
};

/**
 * Assign a controller to this farmhouse instance. If the controller did not exist in the store, it is created
 * To unassign a controller you need to assign it to another farmhouse
 * @method addController
 * @param {Object} [dto]: instance of Controller or Controller data
 * @return {Object}
 * @throw {Error}
 */
Farmhouse.prototype.addController = function(dto) {

    if (!dto) {

        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "Farmhouse.addController: dto cannot be null or undefined"
        };
    }

    dto.structure = this.key;
    return this.deviceManager.updateController(dto);
};

/**
 * List all equipments under this farmhouse
 * @method listEquipments
 * @param {Object} [dto]: optional filtering and pagination parameters
 * @param {Number} [dto.resultsPerPage]: how many results to return per call (optional, defaults to 50)
 * @param {Number} [dto.pageNumber]: the page number in case there are more than one pages of results (optional, defaults to 1)
 * @return {Object}
 * @throw {Error}
 */
Farmhouse.prototype.listEquipments = function(dto) {

    var searchDto =  dto ? JSON.parse(JSON.stringify(dto)) : {};
    searchDto.structure = this.key;
    return this.deviceManager.listEquipments(searchDto);
};

/**
 * Retrive a given equipment under this farmhouse
 * @method getEquipment
 * @param {String} id: the equipment id (key)
 * @return {Equipment}
 * @throws {Error}
 */
Farmhouse.prototype.getEquipment = function(id) {
    return this.deviceManager.getEquipment(id);
};

/**
 * Assign an equipment to this farmhouse instance. If the equipment did not exist in the store, it is created
 * To unassign a equipment you need to assign it to another farmhouse
 * @method addController
 * @param {Object} [dto]: instance of Controller or Controller data
 * @return {Object}
 * @throw {Error}
 */
Farmhouse.prototype.addEquipment = function(dto) {

    if (!dto) {

        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "Farmhouse.addEquipement: dto cannot be null or undefined"
        };
    }

    dto.structure = this.key;
    return this.deviceManager.updateEquipment(dto);
};

/**
 * Start a new cycle. There should be no other ongoing cycle.
 * @method startCycle
 * @param {Object} [dto]: cycle data
 * @param {String} [dto.startDate]: cycle start date (YYYY-MM-DD). Optional, defaults to current date
 * @param {String} [dto.endtDate]: cycle end date (YYYY-MM-DD). Optional 
 * @param {Number} [dto.birdNbrIn]: initial count of birds in the cyle
 * @param {Number} [dto.currentBirdCount]: current count of birds in the cyle, optional. Defaults to initial count 
 * @param {String} [dto.endBirdCount]: end count of birds in the cyle, optional. Defaults to initial count
 * @return {Object}
 * @throws {Error}
 */
Farmhouse.prototype.startCycle = function(dto) {

    if (!dto) {

        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "Farmhouse.startCycle: dto can be nul or undefined"
        };
    }    

    var starting = true;
    try {

        // this part is to deal with concurrent threads (checking if starting)
        var resp = document.create({key: this.startCycleKey}); 
        if (resp.metadata.status == "failure" &&  resp.metadata.errorCode == "DUPLICATE_DOCUMENT_KEY")   {

            starting = false;
            log.error("Famrhouse.startCycle: could not start cycle for farmhouse: " + this.key + "\n" + JSON.stringify(resp));
            throw {
                errorCode: "Invalid_Action",
                errorDetail: "Farmhouse.startCycle: a cycle for (" + this.key + ") is already starting"
            };

        }

        if (!dto || !dto.birdNbrIn) {

            throw {
                errorCode: "Missing_Parameter",
                errorDetail: "Farmhouse.startCycle: dto.birdNbrIn has to be specified"
            };
        }

        // checking if a cycle is already started (try to find if there is a cycle and if that cycle has not ended yet)
        var currentCycle = this.getCurrentCycle(); 
        if (currentCycle && !currentCycle.endDate) {

            throw {
                errorCode: "Invalid_Action",
                errorDetail: "Farmhouse.startCycle: a cycle (" + currentCycle.key + ") is already ongoing"
            };
        }   

        var data = JSON.parse(JSON.stringify(dto));
        data.key = this.cycleKey;
        data.farmhouse = this.key;
        data.startDate = dto && dto.startDate ? util.toShortDate(dto.startDate) : util.toShortDate();
        data.currentBirdCount = dto && dto.currentBirdCount ? dto.currentBirdCount : dto.birdNbrIn;
        data.endBirdCount = dto && dto.endBirdCount ? dto.endBirdCount : -1;   
        return this.farmhouseManager.updateCycle(data);
    }finally{

        if (starting) {

            deleteResp = document.delete(this.startCycleKey);
            if (resp.metadata.status == "failure") {
                log.error("Famrhouse.startCycle: could not remove startingCycle lock for this farmhouse " + this.key + "\n" + JSON.stringify(resp));   
            }
        }
    }
};

/**
 * Get the current cycle. There should be no other ongoing cycle
 * @method getCycle
 * @return {Object} cycle or null if no cycle is started
 * @throw {Error}
 */
Farmhouse.prototype.getCurrentCycle = function() {

    try {

        var cycle = this.farmhouseManager.getCycle(this.cycleKey); 
        return cycle;
    }catch(exception) {
        // if here, means not found
        log.error(JSON.stringify(exception))
        return null;
    }
};

/**
 * UpdateCycle the current cycle.
 * @method updateCycle
 * @param {Object} [dto]: cycle data
 * @return {Object} cycle or null if no cycle is started
 * @throw {Error}
 */
Farmhouse.prototype.updateCycle = function(dto) {

    if (!dto) {

        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "Farmhouse.updateCycle: dto can be nul or undefined"
        };
    }

    var data = JSON.parse(JSON.stringify(dto));
    data.farmhouse = this.key;
    var cycle = this.farmhouseManager.updateCycle(data);
    return cycle;
};

/**
 * Stop the current cycle if a cycle was started. Otherwise, throws an exception 
 * @method stopCycle
 * @return {Cycle} the current cycle object that was stopped
 * @throw {Error}
 */
Farmhouse.prototype.stopCycle = function() {
 
    var currentCycle = this.getCurrentCycle();  
    if (!currentCycle) {

        throw {
            error: "Invalid_Action",
            errorDetail: "No cycle was started for this farmhouse: " + this.key
        };
    }

    return currentCycle.stop();
};

/**
 * Stop the current cycle if a cycle was started. Otherwise, throws an exception 
 * @method stopCycle
 * @return {Cycle} the current cycle object that was stopped
 * @throw {Error}
 */
Farmhouse.prototype.getCurrentValueOf = function() {
 
    var currentCycle = this.getCurrentCycle();  
    if (!currentCycle) {

        throw {
            error: "Invalid_Action",
            errorDetail: "No cycle was started for this farmhouse: " + this.key
        };
    }

    return currentCycle.stop();
};


/**
 * List all controllers under this farmhouse
 * @method listControllers
 * @param {Object} [dto]: optional parameters
 * @param {Number} [dto.pageNumber]: specifies the page number when paginating, optional, defaults to 1
 * @param {Number} [dto.resultsPerPage]: specifies the max number of results per page (>50), optional, defaults to 50
 * @return {JSONArray<Controller>} 
 * @throws {Error}
 */
Farmhouse.prototype.listControllers = function(dto) {
    
 	var searchDto = {};
    if (dto) {
        searchDto = JSON.parse(JSON.stringify(dto));
    }
    
    searchDto.structure = this.key;    
    return this.deviceManager.listControllers(searchDto);
};

/**
 * List all sensor cores under this farmhouse and not under a controller
 * @method listSensorCores
 * @param {Object} [dto]: optional parameters
 * @param {Number} [dto.pageNumber]: specifies the page number when paginating, optional, defaults to 1
 * @param {Number} [dto.resultsPerPage]: specifies the max number of results per page (>50), optional, defaults to 50
 * @return {JSONArray<SensorCore>} 
 * @throws {Error}
 */
Farmhouse.prototype.listSensorCores = function() {
    
    var searchDto = {};
    if (dto) {
        searchDto = JSON.parse(JSON.stringify(dto));
    }
    
    searchDto.structure = this.key;    
    return this.deviceManager.listSensorCores(searchDto);
};

/**
 * List sensors under this farmhouse
 * IMPORTANT: the implementation of this method is incomplete as it considers that the number of controllers
 * and the number of sensor cores can be above 50 for this farmhouse. 
 * @method listSensors
 * @param {Object} [dto]: optional parameters
 * @param {String} [dto.type]: sensor type
 * @return {JSONArray<Sensor>} 
 * @throws {Error}
 */
Farmhouse.prototype.listSensors = function(dto) {
    
    var controllers = this.listControllers();
    var sensorCores = this.listSensorCores();
    var sensors = [];
    
    var type = dto && dto.type ? dto.type : null;
	var fromControllers = this._listSensors(controllers, type);   
    var fromSensorCores = this._listSensors(sensorCores, type); 
    sensors = sensors.concat(fromControllers);
    sensors = sensors.contact(fromSensorCores);
    return sensors;
};

/**
 * Utility methods that factors out reusable logic to list sensors
 * @method _listSensors
 * @param {Array} sensorOwnerList: a list of entities that have associated sensors, e.g. controllers and sensor cores
 * @param {String} sensor type: the type of sensor to filter with (optional)
 * @return {Array<Sensor>}
 */
Farmhouse.prototype._listSensors = function(sensorOwnerList, sensorType) {
    
    // get all sensors related to the 'sensorOwnerList' in the farmhouse
    var sensors = [];
    for (var i = 0; sensorOwnerList && i < sensorOwnerList.length; i++) {
        
        var list = sensorOwnerList[i].listSensors();
        
        // if asked to filter by sensor type, do it
        if (sensorType) {
        	
            for (var j = 0; j < list.length; j++) {
                
                if (list[i].sensor_type == dto.type){
                    sensors.push(list[i]);
                }
            }
        }else { // otherwise, just add all sensors
            sensors.push(list);
        }
    }
    
    return sensors;
};