var document = require("document");
var log = require("log"); log.setLevel("info");
var farmhouseModule = require("./farmhouse");
var deviceManagerModule = require("/agServerCore/entities/deviceManager");

const FARMHOUSE = "FarmHouse";

/**
 * Defines the FarmhouseManager helper class
 * @class FarmhouseManager
 * @constructor
 */
var FarmhouseManager = function() {
}

/**
 * lists all available farms
 * @method listFarmhouses
 * @param {Object} [dto] : contains optional filtering criteria
 * @param {String} [dto.farm]: return all farmhouses related to this farm (key)
 * @return {JSONArray<Farmhouse>} 
 * @throws {Error}
 */
FarmhouseManager.prototype.listFarmhouses = function(dto) {
        
    var queryParam = {
       
        query: 'apsdb.schema="' + FARMHOUSE + '"',
        fields: "*",
        count: true,
        resultsPerPage: (!dto || !dto.resultsPerPage) ? 50 : dto.resultsPerPage,
        pageNumber: (!dto || !dto.pageNumber) ? 1 : dto.pageNumber
    };
    
    if (dto && dto.farm) {
        queryParam.query += '& farm="'+ dto.farm + '"';
    }

    var resp = document.query(queryParam);
    if (resp.metadata.status == "failure") {
        throw resp.metadata;
    }

    if (!resp.result.documents){
        throw {
            errorCode: "Entity_Not_Found",
            errorDetail: "FarmManager.listFarmhouses: could not find farmhouses"
        };
    }

    var result = [];
    for (var i=0; i < resp.result.documents.length; i++) {
        result.push(new farmhouseModule.Farmhouse( resp.result.documents[i]));
    }
    
    return result;
}

/**
 * get Farmhouse based on farmhouseid
 * @method getFarmhouse
 * @param {String} id
 * @return {Farmhouse}
 * @throws {Error}
 */
FarmhouseManager.prototype.getFarmhouse = function(id) {
    
    var doc = this.getFarmhouseObject(id);
    return new farmhouseModule.Farmhouse(doc);
}

/**
 * updates a Farmhouse object. If it doesn't exist, the method creates it
 *
 * @method updateFarmhouse
 * @param {Object} [dto]  farmhouse data or Farmhouse instance
 * @return {Object}
 * @throws {Error}
 */
FarmhouseManager.prototype.updateFarmhouse = function(dto) {
    
    if (!dto) {
        
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "FarmhouseManager.updateFarmhouse: dto cannot be null or undefined"
        };
    }
    
    var fields = JSON.parse(JSON.stringify(dto));
    fields["meta.schema"] = FARMHOUSE;
    var resp = document.save(fields);
    if (resp.metadata.status == "failure") {
        throw resp.metadata;
    }

    return resp;
}

/**
 * flags a Farmhouse as deleted
 * @method deleteFarmhouse
 * @param {String} id identifier or the farmhouse
 * @return {Object}
 * @throws {Error}
 */
FarmhouseManager.prototype.deleteFarmhouse = function(id) {
   return this.deleteFarmhouseObject(id);
}

/**
 * Generic method: get an object that is related to a farmhous based on id
 * @method getFarmhouseObject
 * @param {String} id: the object id (key)
 * @param {String} caller: the name of the invoking method
 * @return {Object} document that relates to a specific device
 * @throws {Error}
 */
FarmhouseManager.prototype.getFarmhouseObject = function(id, caller) {
    
    var method = caller ? caller : "getFarmhouseObject";
    if (!id) {
        
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "FarmhouseManager." +  method + ": id cannot be null or empty"
        };
    }
   
    var resp = document.get(id);
    if (resp.metadata.status == "failure") {
        throw resp.metadata;
    }

    return resp.result;
};

/**
 * Generic method: flags an object as deleted
 * @method deleteFarmhouseObject
 * @param {String} id: the identifier of the object
 * @return {Object}
 * @throws {Error}
 */
FarmhouseManager.prototype.deleteFarmhouseObject = function(id, caller) {
    
    var method = caller ? caller : "deleteFarmhouseObject";
    if (!id) {
        
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "FarmhouseManager." + method + ": id cannot be null or empty"
        };
    }

    var resp = document.delete(id);
    if (resp.metadata.status == "failure") {
        throw resp.metadata;
    }

    return resp;
};