var document = require("document");
var log = require("log"); log.setLevel("info");
var farmhouseModule = require("./farmhouse");
var cycleModule = require("./cycle");
var deviceManagerModule = require("/agServerCore/entities/devices/deviceManager");
var managerModule = require("/agServerCore/entities/manager");

const FARMHOUSE = "FarmHouse";
const CYCLE = "Cycle";

/**
 * Defines the FarmhouseManager helper class
 * @class FarmhouseManager
 * @constructor
 */
var FarmhouseManager = function() {
    this.deviceManager = null;
}

FarmhouseManager.prototype = new managerModule.Manager();
FarmhouseManager.prototype.constructor = FarmhouseManager;

/**
 * @method getDeviceManager
 * @return {DeviceManager};
 */
FarmhouseManager.prototype.getDeviceManager = function() {

    if (!this.deviceManager) {
        this.deviceManager = new deviceManagerModule.DeviceManager();
    }

    return this.deviceManager;
};

/**
 * lists all available farms
 * @method listFarmhouses
 * @param {Object} [dto] : contains optional filtering criteria
 * @param {String} [dto.farmhouse]: optional, filter by farmhouses related to this farm (key)
 * @param {Number} [dto.resultsPerPage]: how many results to return per call (optional, defaults to 50)
 * @param {Number} [dto.pageNumber]: the page number in case there are more than one pages of results (optional, defaults to 1)
 * @return {JSONArray<Farmhouse>} 
 * @throws {Error}
 */
FarmhouseManager.prototype.listFarmhouses = function(dto) {

    var queryParam = {

        query: 'apsdb.schema="' + FARMHOUSE + '"',
        fields: "*",
        count: true,
        resultsPerPage: (!dto || !dto.resultsPerPage) ? 50 : dto.resultsPerPage,
        pageNumber: (!dto || !dto.pageNumber) ? 1 : dto.pageNumber
    };

    if (dto && dto.farmhouse) {
        queryParam.query += '& farmhouse="'+ dto.farm + '"';
    }

    var resp = document.query(queryParam);
    if (resp.metadata.status == "failure") {
        throw resp.metadata;
    }

    if (!resp.result.documents){
        throw {
            errorCode: "Entity_Not_Found",
            errorDetail: "FarmManager.listFarmhouses: could not find farmhouses"
        };
    }

    var result = [];
    for (var i=0; i < resp.result.documents.length; i++) {
        result.push(new farmhouseModule.Farmhouse(resp.result.documents[i], this));
    }

    return result;
};

/**
 * get Farmhouse based on farmhouseid
 * @method getFarmhouse
 * @param {String} id
 * @return {Farmhouse}
 * @throws {Error}
 */
FarmhouseManager.prototype.getFarmhouse = function(id) {

    var doc = this.getObject(id);
    return new farmhouseModule.Farmhouse(doc, this);
}

/**
 * updates a Farmhouse object. If it doesn't exist, the method creates it
 * @method updateFarmhouse
 * @param {Object} [dto]  farmhouse data or Farmhouse instance
 * @return {Object}
 * @throws {Error}
 */
FarmhouseManager.prototype.updateFarmhouse = function(dto) {
    return this.updateObject(dto, FARMHOUSE, "updateFarmhouse");
};

/**
 * flags a Farmhouse as deleted
 * @method deleteFarmhouse
 * @param {String} id identifier or the farmhouse
 * @return {Object}
 * @throws {Error}
 */
FarmhouseManager.prototype.deleteFarmhouse = function(id) {
    return this.deleteObject(id);
};

/**
 * @method listCycles
 * @param {String} [dto.farmhouse]: optional, filter by farmhouses related to this farm (key)
 * @param {Number} [dto.resultsPerPage]: how many results to return per call (optional, defaults to 50)
 * @param {Number} [dto.pageNumber]: the page number in case there are more than one pages of results (optional, defaults to 1)
 * @param {String} [dto.filterExp]: optional, a filter expression, e.g. "fieldX<numeric> = 123"
 * @param {String} [dto.sortExp]: optional, sort expression, e.g "startDate<date> > '2018-01-01'"
 * @return {Array<Cycle>}
 * @throw {Error}
 */
FarmhouseManager.prototype.listCycles = function(dto) {

    var queryParam = {

        "apsdb.query": 'apsdb.schema="' + CYCLE + '"',
        "apsdb.queryFields": "*",
        "apsdb.count": "true",
        "apsdb.lock": "true",
        "apsdb.resultsPerPage": "" + ((!dto || !dto.resultsPerPage) ? 50 : dto.resultsPerPage),
        "apsdb.pageNumber": "" + ((!dto || !dto.pageNumber) ? 1 : dto.pageNumber)
    };
	
    log.info(JSON.stringify(queryParam))
    
    if (dto && dto.farmhouse) {
        queryParam["apsdb.query"] += ' and farmhouse="'+ dto.farmhouse + '"';
    }
    
    if (dto && dto.filterExp) {
        queryParam["apsdb.query"] += ' and ' + dto.filterExp;
    }
    
    if (dto && dto.sortExp) {
        queryParam["apsdb.sort"] = dto.sortExp;
    }

    var transaction = null;
    var result = [];
    try {
        
        transaction = apsdb.beginTransaction();
        //var resp = document.query(queryParam);  
        var resp = apsdb.callApi("Query", queryParam, null);
        if (resp.metadata.status == "failure") {
            throw resp.metadata;
        }

        if (!resp.result.documents){
            throw {
                errorCode: "Entity_Not_Found",
                errorDetail: "FarmManager.listCycles: could not find cycles"
            };
        }


        for (var i=0; i < resp.result.documents.length; i++) {
            result.push(new cycleModule.Cycle(resp.result.documents[i]));
        }
	
        transaction.commit();
    	return result;
    }catch(exception){
        
        log.error("Error while querying cycles\n" + JSON.stringify(exception));
        if (transaction){
            transaction.rollback();
        }
        
        throw exception;
    }
};

/**
 * @method getCycle
 * @param {String} cycle id
 * @return {Cycle}
 * @throw {Error}
 */
FarmhouseManager.prototype.getCycle = function(id) {

    var doc = this.getObject(id);
    return new cycleModule.Cycle(doc);
};

/**
 * updates a Cycle object. If it doesn't exist, the method creates it
 * @method updateCycle
 * @param {Object} [dto]  farmhouse data or Farmhouse instance
 * @return {Object}
 * @throws {Error}
 */
FarmhouseManager.prototype.updateCycle = function(dto) {
    return this.updateObject(dto, CYCLE, "updateCycle");
};

/**
 * flags a Cycle as deleted
 * @method deleteCycle
 * @param {String} id identifier or the cycle
 * @return {Object}
 * @throws {Error}
 */
FarmhouseManager.prototype.deleteCycle = function(id) {
    return this.deleteObject(id);
};