var document = require("document");
var log = require("log"); log.setLevel("info");
var farmModule = require("./farm");
var farmhouseManagerModule = require("../farmhouses/farmhouseManager");
var managerModule = require("/agServerCore/entities/manager");
var util = require("/agServerCore/lib/util");

const FARM = "Farm";

/**
 * Defines the FarmManager helper class
 * @class FarmManager
 * @constructor
 */
var FarmManager = function() {
    this.farmhouseManager = new farmhouseManagerModule.FarmhouseManager();
};

FarmManager.prototype = new managerModule.Manager();
FarmManager.prototype.constructor = FarmManager;

/**
 * lists all available farms
 * @method listFarms
 * @method listFarmhouses
 * @param {Object} [dto] : contains optional filtering criteria
 * @param {Number} [dto.pageNumber]: when paginating, specifies the page to return, optional, defaults to 1
 * @param {Number} [dto.resultsPerPage]: specifies how many results to return per page, optional, defaults to 50
 * @return {JSONArray<Farm>}
 * @throws {Error}
 */
FarmManager.prototype.listFarms = function(dto) {
    
    var queryParam = {
        
        query: 'apsdb.schema="' + FARM + '"',
        fields: "*",
        count: true,
        resultsPerPage: (!dto || !dto.resultsPerPage) ? 50 : dto.resultsPerPage,
        pageNumber: (!dto || !dto.pageNumber) ? 1 : dto.pageNumber
    }; 
    
    var resp = document.query(queryParam);
    if (resp.metadata.status == "failure") {
        throw resp.metadata;
    }
    
    var list = [];
    for (var i = 0; i < resp.result.documents.length; i++) {
    	
        var farm = new farmModule.Farm(resp.result.documents[i], this.farmhouseManager);
        list.push(farm);
    }
    
    return list;
};

/**
 * returns an instance of Farm based on the farmid
 * @method getFarm
 * @param {String} farmid
 * @return {Farm}
 * @throws {Error}
 */
FarmManager.prototype.getFarm = function(farmid) {
    
    if (!farmid) {
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "FarmManager.getFarm: farmid cannot be null or empty"
        };
    }    
    
    var doc = this.getObject(id); 
    return new farmModule.Farm(doc);
};

/**
 * updates a Farm object. If it doesn't exist, this method creates it
 * @method updateFarm
 * @param {Object} [dto] farm data or instance of Farm
 * @return {Object}
 * @throws {Error}
 */
FarmManager.prototype.updateFarm = function(dto) {
    return this.updateObject(dto, FARM, "updateFarm");
};

/**
 * flag a Farm as deleted
 * @method deleteFarm
 * @param {String} farmid
 * @return {Object} 
 * @throws {Error}
 */
FarmManager.prototype.deleteFarm = function(farmid) {
    
    if (!farmid) {
        
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "FarmManager.deleteFarm: farmid cannot be null or empty"
        };
    }
    
    // check if this farm has related data (farm houses, etc.)
    var check = document.query({query: 'structure = "' + farmid + '" or farm="' + farmid + '"', fields:'key'});
    if (check.metadata.status == "failure") {
        
         throw {
            errorCode: "Internal_Error",
            errorDetail: "FarmManager.deleteFarm: check failed\n" + JSON.stringify(check)
        };
    }
    
    if (check.result.documents.length > 0) {
        
        throw {
            errorCode: "Invalid_Action",
            errorDetail: "FarmManager.deleteFarm: cannot delete a farm that has documents related to it"
        };
    }
    
    var resp = document.delete(farmid);
    if (resp.metadata.status == "failure") {
        throw resp.metadata;
    }
    
    return resp.metadata;
}

/**
 * Calculates the happiness index of a given farm (delegates this work to some implementation of HappinessCalculator)
 * @method calculateHappiness  
 * @param {String} farmid
 * @return {Number} farm's happiness index 
 * @throws {Error}
 */
FarmManager.prototype.calculateHappiness = function(farmid) {    
   return this._getHappinessCalculator().calculateHappiness(farmid);
};

/**
 * Calculates the global happiness index (delegates this work to some implementation of HappinessCalculator)
 * @method calculateGlobalHappiness
 * @return {Number} global happiness index 
 * @throws {Error}
 */
FarmManager.prototype.calculateGlobalHappiness = function() {
    return this._getHappinessCalculator().calculateGlobalHappiness();
};

/**
 * Returns the list of global happiness measurements 
 * @method listGlobalHappiness
 * @return {Array} array of measurments
 * @throws {Error}
 */
FarmManager.prototype.listGlobalHappiness = function() {
    
    var resp = this._getHappinessCalculator().listGlobalHappinessIndexes();
    return resp.documents;
};

FarmManager.prototype._getHappinessCalculator = function() {   
    
    if (!this.happinessCalculator) {
        
        var config = require("/agApps/ppf/config");
        var moduleName = config.happinessIndexCalculator.path; 
        var moduleInstance = require(moduleName);
        var className = config.happinessIndexCalculator.clazz; 
        this.happinessCalculator = new moduleInstance[className]({"farmManager": this});
    }
  
    return this.happinessCalculator;
};