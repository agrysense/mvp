var document = require("document");
var log = require("log"); log.setLevel("info");
var componentModule = require("/agServerCore/entities/component");

var farmid = null;
var company = null;
var name = null;
var location = null;
var gps = null;

/**
 * Defines the Farm object
 * @class Farm
 * @constructor
 * @param {Object} [dto]: a document containing farm data
 * @param {FarmHouseManager}: farmhouseManager: instance of FarmHouseManager
 * @throw {Error}
 */
function Farm(dto, farmhouseManager) {
    
    componentModule.Component.call(this, dto);
    if (!farmhouseManager) {
    	
        throw {
            errorCode: "Missing_Parameter",
            errorDetail: "farmhouseManager cannot be null or undefined"
        };
    }    
    
    this.farmhouseManager = farmhouseManager;
}

Farm.prototype = new componentModule.Component({inheritance: true});
Farm.prototype.constructor = Farm;

/**
 * lists all available farmhouses under this farm
 * 
 * @method listFarmhouses
 * @param {String} dto
 * @return {JSONArray<FarmHouse>}
 * @throws {Error}
 */
Farm.prototype.listFarmhouses = function(dto) {
    
    var farmid = (dto != null && dto.farmid != null) ? dto.farmid : this.farmid;
    var updatedDto = {
      "farmid": farmid
    };
    
    return this.farmhouseManager.listFarmhouses(updatedDto);
}

/**
 * counts all available farmhouses under this farm
 * 
 * @method getTotalFarmhouses
 * @param {String} dto
 * @return {Object} 
 * @throws {Error}
 */
Farm.prototype.getTotalFarmhouses = function(dto) {    
    return this.listFarmhouses(dto).length;
}

/**
 * counts all available birds under this farm
 *
 * @method getTotalBirds
 * @param {String} dto
 * @return {Object}
 * @throws {Error}
 */
Farm.prototype.getTotalBirds = function(dto) {
}