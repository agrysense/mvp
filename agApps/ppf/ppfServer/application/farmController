var log = require("log"); log.setLevel("info");
var farmManager = require("../entities/farms/farmManager");
var farmhouseManager = require("../entities/farmhouses/farmhouseManager");
var deviceManager = require("../entities/devices/deviceManager");

/**
 * Defines the FarmController class
 *
 * @class
 * @constructor
 */
var FarmController = function (dto) {
}

/**
 * list all available farms
 *
 * @method listFarms
 * @param {String} dto
 * @return {JSONArray<Farm>} 
 * @throws {Error}
 */
FarmController.prototype.listFarms = function(dto) {
    try {
    	var farmMngr = new farmManager.FarmManager();
        return farmMngr.listFarms(dto);
    } catch (exception) {
        return exception;
    }
}

/**
 * get farm based on farmid
 *
 * @method getFarm
 * @param {String} dto
 * @return {Farm} 
 * @throws {Error}
 */
FarmController.prototype.getFarm = function(dto) {
    try {
        var farmMngr = new farmManager.FarmManager();
        var result = {};
        var farm = null;
        try {
            farm = farmMngr.getFarm(dto);
        } catch (exception) {
        }
        if (farm != null) {
            var deviceMngr = new deviceManager.DeviceManager();
            var farmhouseMngr = new farmhouseManager.FarmhouseManager();
            result.farm = farm.toJSONObject();
            var totalFarmhouses = farm.getTotalFarmhouses(farmhouseMngr, farm);
            result.totalFarmHouses = totalFarmhouses;
            var farmhouses = farm.listFarmhouses(farmhouseMngr);
            var farmhousesObject = [];
            for (var i=0; i < farmhouses.length; i++) {
                var farmhouse = farmhouses[i];
                var controllers = farmhouse.listControllers(deviceMngr);
                var farmhouseObject = farmhouse.toJSONObject();
                var controllersObject = [];
                for (var j=0; j < controllers.length; j++) {
                    var controller = controllers[j];

                    var cameras = controller.listCameras(deviceMngr);
                    var controllerObject = controller.toJSONObject();
                    var camerasObject = [];
                    for (var k=0; k < cameras.length; k++) {
                        camerasObject.push(cameras[k].toJSONObject());
                    }
                    controllerObject.cameras = camerasObject;

                    var sensors = controller.listSensors(deviceMngr);
                    var sensorsObject = [];
                    for (var k=0; k < sensors.length; k++) {
                        if (sensors[k].sensor_core == null || sensors[k].sensor_core == "")
                            sensorsObject.push(sensors[k].toJSONObject());
                    }
                    controllerObject.sensors = sensorsObject;

                    var sensorCores = controller.listSensorCores(deviceMngr);
                    var sensorCoresObject = [];
                    for (var k=0; k < sensorCores.length; k++) {
                        var sensorsInCoreObject = [];
                        for (var x=0; x < sensors.length; x++) {
                            if (sensors[x].sensor_core != null && sensors[x].sensor_core == sensorCores[k].id)
                                sensorsInCoreObject.push(sensors[x].toJSONObject());
                        }
                        var tempSensorCore = sensorCores[k].toJSONObject();
                        tempSensorCore.sensors = sensorsInCoreObject;
                        sensorCoresObject.push(tempSensorCore);
                    }
                    controllerObject.sensorCores = sensorCoresObject;

                    controllersObject.push(controllerObject);
                }
                farmhouseObject.controllers = controllersObject;
                farmhousesObject.push(farmhouseObject);
            }
            result.farm.farmhouses = farmhousesObject;
        } else {
            result.farm = {};
            result.totalFarmHouses = 0;
            result.farmhouses = {};
        }

        return result;
    } catch(exception) {
        return exception;
    }
    /*switch(params.field) {
        case "happyness": return farm.happyness.value;
        case "feed": return farm.feed.value;
        case "water": return farm.water.value;
        case "energy": return farm.energy.value;
    }
    */
}

/**
 * Update a Farm, create it if it doesn't exist
 *
 * @method updateFarm
 * @param {String} dto
 * @return {Object} 
 * @throws {Error}
 */
FarmController.prototype.updateFarm = function(dto) {
    try {
        var customParams = JSON.parse(JSON.stringify(dto));
        
        var farmMngr = new farmManager.FarmManager();
        var farm = null;
        try {
            farm = farmMngr.getFarm(dto);
        } catch(exception) {
        }
        if (farm != null && farm.key != null) {
            if (dto.company == null)
                customParams.company = farm.company;
            if (dto.name == null)
                customParams.name = farm.name;
            if (dto.location == null)
                customParams.location = farm.location;
            if (dto.gps == null)
                customParams.gps = farm.gps;
            customParams.key = farm.key;
        }
        return farmMngr.updateFarm(customParams);
    }catch(exception) {
        return exception;
    }
}

/**
 * flag a Farm as deleted
 *
 * @method deleteFarm
 * @param {String} dto
 * @return {Object} 
 * @throws {Error}
 */
FarmController.prototype.deleteFarm = function(dto) {
    try {
        var farmMngr = new farmManager.FarmManager();
        var farm = farmMngr.getFarm(dto);
        if (farm.key != null) {
            return farmMngr.deleteFarm(farm);
        }
    } catch(exception) {
        return exception;
    }
}

/**
 * list all available farmhouses
 *
 * @method listFarmhouses
 * @param {String} dto
 * @return {JSONArray<Farmhouse>} 
 * @throws {Error}
 */
FarmController.prototype.listFarmhouses = function(dto) {
    try {
        var farmhouseMngr = new farmhouseManager.FarmhouseManager();
        return farmhouseMngr.listFarmhouses(dto);
    } catch (exception) {
        return exception;
    }
}

/**
 * get farmhouse based on farmhouseid
 *
 * @method getFarmhouse
 * @param {String} dto
 * @return {Farm} 
 * @throws {Error}
 */
FarmController.prototype.getFarmhouse = function(dto) {
    try {
        var farmhouseMngr = new farmhouseManager.FarmhouseManager();
        return farmhouseMngr.getFarmhouse(dto);
    } catch (exception) {
        return exception
    }
}

/**
 * Update a Farmhouse, create it if it doesn't exist
 *
 * @method updateFarmhouse
 * @param {String} dto
 * @return {Object} 
 * @throws {Error}
 */
FarmController.prototype.updateFarmhouse = function(dto) {
    try {
        var customParams = JSON.parse(JSON.stringify(dto));
        
        var farmhouseMngr = new farmhouseManager.FarmhouseManager();
        var farmhouse = null;
        try {
            farmhouse = farmhouseMngr.getFarmhouse(dto);
        } catch(exception) {
        }
        if (farmhouse != null && farmhouse.key != null) {
            if (dto.name == null)
                customParams.name = farmhouse.name;
            if (dto.location == null)
                customParams.location = farmhouse.location;
            if (dto.gps == null)
                customParams.gps = farmhouse.gps;
            if (dto.description == null)
                customParams.description = farmhouse.description;
            if (dto.category == null)
                customParams.category = farmhouse.category;
            if (dto.length == null)
                customParams.length = farmhouse.length;
            if (dto.width == null)
                customParams.width = farmhouse.width;
            customParams.key = farmhouse.key;
        }
        return farmhouseMngr.updateFarmhouse(customParams);
    }catch(exception) {
        return exception;
    }
}

/**
 * flag a Farmhouse as deleted
 *
 * @method deleteFarmhouse
 * @param {String} dto
 * @return {Object} 
 * @throws {Error}
 */
FarmController.prototype.deleteFarmhouse = function(dto) {
    try {
        var farmhouseMngr = new farmhouseManager.FarmhouseManager();
        var farmhouse = farmhouseMngr.getFarmhouse(dto);
        if (farmhouse.key != null) {
            return farmhouseMngr.deleteFarmhouse(farmhouse);
        }
    } catch(exception) {
        return exception;
    }
}