/**
 * This file contains functions only relying on scriptr.io's API to create farms and farmhouses in the storage   
 */

var document = require("document");
var log = require("log"); log.setLevel("debug");
var util = require("/tests/util");
var initCore = require("/tests/agServerCore/entities/init");

const FARM_KEY_PREFIX = "TEST_FARM_";
const FARM_NAME_PREFIX = "TEST_FARM_";
const FARMHOUSE_KEY_PREFIX = "TEST_FARMHOUSE_";
const FARMHOUSE_NAME_PREFIX = "TEST_FARMHOUSE_";
const CYCLE_KEY_PREFIX = "TEST_CYCLE_";
const CYCLE_NAME_PREFIX = "TEST_CYCLE_";
const EQUIPMENT_KEY_PREFIX = "TEST_EQUIPMENT_";
const EQUIPMENT_NAME_PREFIX = "TEST_EQUIPMENT_";
const MAX_BIRDS = 2000;
const MIN_BIRDS = 200;

function createFarmData() {

    var uid = util.guid();
    var data = {

        "key": FARM_KEY_PREFIX + uid,
        "company": "acme",
        "name": FARM_NAME_PREFIX + uid,
        "location": "test",
        "gps": util.gps(),       
        "meta.schema": "Farm"
    };

    return data;
}

function createFarm() {

    var data = createFarmData();
    var resp = document.save(data);    
    if (resp.metadata.status == "failure") {
        throw(JSON.stringify(resp.metadata));
    }

    createFarmhouse(data.key);
    return data.key;
}

function createFarmhouseData(farmid, location) { 

    if (!farmid){
        throw "init.createFarmhouseData needs farmid";
    }

    var uid = util.guid();
    var data = {

        "key": FARMHOUSE_KEY_PREFIX + uid,
        "name": FARMHOUSE_NAME_PREFIX + uid,
        "gps": location ? location : util.gps(),
        "farm": farmid,
		"description": "some farmhouse",
		"category": category(),
		"length": size(),
		"width": size(),
        "meta.schema": "FarmHouse"
    }; 

    return data;
}

function createFarmhouse(farmid, location) {

    var data = createFarmhouseData(farmid, location);
    var resp = document.save(data);    
    if (resp.metadata.status == "failure") {
        throw(JSON.stringify(resp.metadata));
    }

    initCore.createController(data.key);
    return data.key;
}

function createCycleData(farmhouse) {
    
    var birdCount = Math.round(Math.random()  * (MAX_BIRDS - MIN_BIRDS)) + MIN_BIRDS;
    var uid = util.guid();
    var data = {
        
        //key": CYCLE_KEY_PREFIX + uid,
        "key": farmhouse + "_Cycle",
        "cycleName": CYCLE_NAME_PREFIX + uid,
        "startDate": someDate(),
        "birdNbrIn": birdCount,
        "currentBirdCount": birdCount,
        "farmhouse": farmhouse,
        "meta.schema": "Cycle" 
    };
    
    return data;
}

function createCycle(farmhouse) {
    
    var data = createCycleData(farmhouse);
    var resp = document.save(data);    
    if (resp.metadata.status == "failure") {
        throw(JSON.stringify(resp.metadata));
    }

    return data.key;
}

function createEquipmentData(farmhouse) {
   
    var data = {
        
        key: EQUIPMENT_KEY_PREFIX + util.guid(),
        type: someEquipment(),
        howMany: Math.round(Math.random() * 5 + 1),
        dateAdded: util.toShortDate(),
        location: util.gps(),
        structure: farmhouse ? farmhouse : "",
        "meta.schema": "Equipment"
    };
    
    return data;
}

function createEquipment(farmhouse) {
    
    var data = createEquipmentData(farmhouse);
    var resp = document.save(data);    
    if (resp.metadata.status == "failure") {
        throw(JSON.stringify(resp.metadata));
    }

    return data.key;
} 

// Caution: should be called after every test suite to make sure there aren't too many documents to delete
function cleanup() {

    // delete all farms
    util.deleteDocumentsOfType("Farm");

    // delete all farmhouses
    util.deleteDocumentsOfType("FarmHouse");
    
     // delete all cycles
    util.deleteDocumentsOfType("Cycle");
    
    // delete all equipments
    util.deleteDocumentsOfType("Equipment");
    
    initCore.cleanup();

}

function category() {
    
    const choice = ["A", "B", "C", "D", "E"];
    var category = choice[Math.round(Math.random() * (choice.length - 1))];
    return category;
}

function size() {
    return Math.round(Math.random() * 30) + 20;
}

function someDate() {
    
    var days = Math.round(Math.random() * 10);
    return util.getDateAfter(null, days);
}

function someEquipment() {
    
    var types = ["X", "Y", "Z", "T", "U", "V"];
    var type = types[Math.round(Math.random() * (types.length - 1))];
    return type;
}