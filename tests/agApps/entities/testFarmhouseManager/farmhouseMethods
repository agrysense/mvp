/**
 * Test suite of the FarmhoseControoler class.
 * Note: avoid doing lengthy tests (split them in multiple scripts if this is the case)
 */

var jasmine = require("/tests/modules/jasmine/boot");
var farmhouseManagerModule = require("/agApps/ppf/ppfServer/entities/farmhouses/farmhouseManager");
var init = require("../init");
var util = require("/tests/util");

var farmhouseManager = null; // farmManager instance under testing
var farmKey = "";

jasmine.describe("Testing the FarmhouseManager class", function() {

    jasmine.beforeAll(function(){   
        
		farmhouseManager = new farmhouseManagerModule.FarmhouseManager();  
        farmKey = init.createFarm();
    }); 

    jasmine.beforeEach(function() {		
        
    });

    jasmine.it("FarmhouseManager.FarmhouseManager() returns an array of n + 1 Farmhouse instancse", function() {

        var initialFarmhouseCount = util.listDocumentsOfType("FarmHouse").length;
        farmhouseKey = init.createFarmhouse(farmKey); // create a farmhouse and link it to the farm. 
        try {

            var list = farmhouseManager.listFarmhouses(); 
            jasmine.expect(list).not.toBeNull(null);
            jasmine.expect(list.length).toBe(initialFarmhouseCount + 1); 
            jasmine.expect(list[0].constructor.name).toBe("Farmhouse");
            jasmine.expect(list[0].key).toBe(farmhouseKey);
        }catch(exception){
            throw(JSON.stringify(exception));
        }finally{
           
        }
    });   
    
    jasmine.it("FarmhouseManager.getFarmhouse() returns the correct instance of Farmhouse", function() {

        farmhouseKey = init.createFarmhouse(farmKey);
        try {

            var farmhouse = farmhouseManager.getFarmhouse(farmhouseKey); 
            jasmine.expect(farmhouse).not.toBeNull(null);
            jasmine.expect(farmhouse.constructor.name).toBe("Farmhouse");
            jasmine.expect(farmhouse.key).toBe(farmhouseKey);
        }catch(exception){
            throw(JSON.stringify(exception));
        }finally{
            
        }
    });   
    
    jasmine.it("FarmhouseManager.updateFarmhouse() actually updates a farmhouse in the store", function() {

        farmhouseKey = init.createFarmhouse(farmKey);
        try {

            var farmhouse = util.getDocument(farmhouseKey);  
            var initialLocation = farmhouse.location;
            var newLocation = "";
            do{
                newLocation = init.gps();
            }while(newLocation ==  farmhouse.location);
            
            farmhouse.location = newLocation;
            farmhouseManager.updateFarmhouse(farmhouse);
            var updatedFarmhouse = util.getDocument(farmhouseKey);
            jasmine.expect(updatedFarmhouse).not.toBeNull(null);          
            jasmine.expect(updatedFarmhouse.key).toBe(farmhouseKey);
            jasmine.expect(updatedFarmhouse.location).toBe(newLocation);
            jasmine.expect(updatedFarmhouse.location).not.toBe(initialLocation);
        }catch(exception){
            throw(JSON.stringify(exception));
        }finally{
            
        }
    });   
   
    jasmine.it("FarmhouseManager.updateFarmhouse() actually creates a farmhouse in the store if it did not exist", function() {

        var farmhouseData = init.createFarmhouseData(farmKey);
        try {

            var list = util.listDocumentsOfType("FarmHouse");
            farmhouseManager.updateFarmhouse(farmhouseData);          
            var newList = util.listDocumentsOfType("FarmHouse");
            jasmine.expect(newList).not.toBeNull(null);          
            jasmine.expect(newList.length).toBe(list.length + 1);
            var found = false;
            for (var i = 0; !found && i < newList.length; i++) {
                found = newList[i].location == farmhouseData.location
            }
            
            jasmine.expect(found).toBe(true);
        }catch(exception){
            throw(JSON.stringify(exception));
        }finally{
           
        }
    });   
    /*
    jasmine.it("controller.deleteFarm() actually deletes a farm from the store", function() {

        var farmKey = init.createFarm();
        try {

            try {
          		
                farmManager.deleteFarm(farmKey);
                var farm = util.getDocument(farmKey);
                jasmine.fail(); // if still here, should fail
            }catch(exception){
                jasmine.expect(true).toBe(true);
            }
        }catch(exception){
            throw(JSON.stringify(exception));
        }finally{
            // init.cleanup();
        }
    });   */

    jasmine.afterEach(function(){        
        
    });
    
     jasmine.afterAll(function(){        
        init.cleanup();
    });
});

jasmine.execute();