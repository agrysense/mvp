/**
 * Test suite of the Camera operations defined in the DeviceManager class.
 * Note: avoid doing lengthy tests (split them in multiple scripts if this is the case)
 */

var jasmine = require("/tests/modules/jasmine/boot");
var deviceManagerModule = require("/agServerCore/entities/devices/deviceManager");
var init = require("../init");
var util = require("/tests/util");

var deviceManager = null; // Instance under testing
var controller = null; // reference controller

jasmine.describe("Testing the DeviceManager class", function() {

    jasmine.beforeAll(function(){
        
		 deviceManager = new deviceManagerModule.DeviceManager();
        
        // create a reference controller
        var key = init.createController();
        controller = util.getDocument(key);
    }); 

    jasmine.beforeEach(function() {
       
    });

    jasmine.it("deviceManager.listCameras() returns an array of n + 1 Camera instances", function() {
        
        var initialList = util.listDocumentsOfType("Camera");
        
        // create 1 camera. 
        var keys = [];
        for(var i = 0; i < 1; i++) {            
            keys[i] = init.createCamera(controller.key);
        }
        
        try {

            var list = deviceManager.listCameras();
            jasmine.expect(list).not.toBeNull(null);
            jasmine.expect(list.length).toBe(initialList.length + 1);
            jasmine.expect(list[0].constructor.name).toBe("Camera");
            jasmine.expect(keys.indexOf(list[0].id)).not.toBeNull();
        }catch(exception){
            throw(JSON.stringify(exception));
        }finally {
              
        }
    });

    jasmine.it("deviceManager.getCamera() returns the requested camera instance", function() {

        try {

            key = init.createCamera(controller.key);
            var cameraData = util.getDocument(key);
            var camera = deviceManager.getCamera(key);
            jasmine.expect(camera).not.toBeNull(null);            
            jasmine.expect(camera.constructor.name).toBe("Camera");            
            jasmine.expect(camera.id).toBe(key);
            jasmine.expect(controller.key).toBe(camera.controller);           
        }catch(exception){
            throw(JSON.stringify(exception));
        }finally {
            
        }
    });

    jasmine.it("deviceManager.updateCamera() effectively updates the specified camera", function() {

        // create a camera
        try {

            var key = init.createCamera(controller.key);
            var cameraData = util.getDocument(key); 
            var camera = deviceManager.getCamera(key);
            camera.third_party = "mac";            
            deviceManager.updateCamera(camera.toJSONObject());     
            var updatedCameraData = util.getDocument(key);
            jasmine.expect(camera.third_party).toBe(updatedCameraData.third_party);  
            jasmine.expect(camera.controller).toBe(updatedCameraData.controller);           
        }catch(exception){
            throw(JSON.stringify(exception));
        }finally{
           
        }
    });
  
    jasmine.it("deviceManager.updateCamera() effectively creates a camera if no key provided", function() {

        // create camera data (not persisted)
        var cameraData = init.createCameraData(controller.key); 
       
        // remove the key
        delete cameraData.key;       
        try {

            var initCameraCount = util.listDocumentsOfType("Camera").length;
            
            // create a camera
            deviceManager.updateCamera(cameraData);
            var newCameraCount = util.listDocumentsOfType("Camera").length;
            jasmine.expect(newCameraCount).toBe(initCameraCount + 1);            
        }catch(exception){
            throw(JSON.stringify(exception));
        }finally {
           
        }
    });

    jasmine.it("deviceManager.deleteCamera() make sure that a camera is deleted from the store", function() {

        // create a camera
        var key = init.createCamera(controller.key);
        try {

            deviceManager.deleteCamera(key);
            try {
                
            	util.getDocument(key);                
                // if here fail
                it.fail();
            }catch(exception){
                // should reach this block
                jasmine.expect(true).toBe(true);   
            } 
        }catch(exception){
            throw(JSON.stringify(exception));
        }finally {
           
        }
    });

    jasmine.afterEach(function(){        

    });

    jasmine.afterAll(function(){        
		 init.cleanup();   
    });
});

jasmine.execute();