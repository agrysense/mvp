/**
 * This file contains functions only relying on scriptr.io's API to create devices in the storage   
 */

var document = require("document");

const CONTROLLER_KEY_PREFIX = "TEST_CONTROLLER_";
const CONTROLLER_NAME_PREFIX = "TEST_CONTROLLER_";
const CAMERA_KEY_PREFIX = "TEST_CAMERA_";
const CAMERA_NAME_PREFIX = "TEST_CAMERA_";
const SENSOR_KEY_PREFIX = "TEST_SENSOR_";
const SENSOR_NAME_PREFIX = "TEST_SENSOR_";
const SENSORCORE_KEY_PREFIX = "TEST_SENSORCORE_";
const SENSORCORE_NAME_PREFIX = "TEST_SENSORCORE_";
const STRUCTURE_PREFIX = "TEST_STRUCTURE_";

function createControllerData() {
    
    var uid = guid();
    var data = {

        "key": CONTROLLER_KEY_PREFIX + uid,
        "server_address": ip(),
        "mac_address": mac(),
        "api_link": "test",
        "software_version": "1.0.0",
        "camera": "true",
        "microphone": "true",
        "ip_address": ip(),
        "structure": STRUCTURE_PREFIX + structure(),
        "security_code": "123456",
        "speaker": "true",
        "name": CONTROLLER_NAME_PREFIX + uid,
        "meta.schema": "Controller"
    };
    
    return data;
}

function createController() {

    var data = createControllerData();
    var resp = document.save(data);    
    if (resp.metadata.status == "failure") {
        throw(JSON.stringify(resp.metadata));
    }

    createCamera(data.key);
    var coreid = createSensorCore(data.key);
    createSensor(data.key, coreid);
    return data.key;
}

function getDocument(key) {

    var resp = document.get(key);    
    if (resp.metadata.status == "failure") {
        throw(JSON.stringify(resp.metadata));
    }

    return resp.result;
}

function createCamera(controllerid) {

    var uid = guid();
    var data = {

        "key": CAMERA_KEY_PREFIX + uid,
        "name": CAMERA_NAME_PREFIX + uid,
        "embedded": "true",
        "controller": controllerid,
        "third_party": "???",
        "vendor": "Digital",
        "model": "ZX-1234",
        "meta.schema": "Camera"
    };

    var resp = document.save(data);    
    if (resp.metadata.status == "failure") {
        throw(JSON.stringify(resp.metadata));
    }

    return data.key;
}

function createSensorCore(controllerid) {
    
    var uid = guid();
    var data = {

        "key": SENSORCORE_KEY_PREFIX + uid,
        "controller": controllerid,
        "mac_address": mac(),
        "hash": guid(6),
        "meta.schema": "SensorCore"
    };

    var resp = document.save(data);    
    if (resp.metadata.status == "failure") {
        throw(JSON.stringify(resp.metadata));
    }

    return data.key;
}

function createSensor(controllerid, coreid) {

    var types = ["CO2", "Ammonia", "Temperature", "Humidity", "Light"];
    var uid = guid();
    var data = {

        "key": SENSOR_KEY_PREFIX + uid,
        "sensor_type": types[Math.round(Math.random() * (types.length - 1))],
        "sensor_core": coreid ? coreid : "",
        "controller": controllerid,
        "port": Math.round(Math.random() * 1000) + 100,
        "meta.schema": "Sensor"
    };

    var resp = document.save(data);    
    if (resp.metadata.status == "failure") {
        throw(JSON.stringify(resp.metadata));
    }

    return data.key;
}

// Caution: should be called after every test suite to make sure there aren't too many documents to delete
function cleanup() {
    
    // delete all controllers
    deleteDocumentsOfType("Controller");
    
    // delete all cameras
    deleteDocumentsOfType("Camera");
    
    // delete all sensors
    deleteDocumentsOfType("Sensor");
    
    // delete all sensor cores
    deleteDocumentsOfType("SensorCore");
}

// Caution: can cover up to 50 documents
function listDocumentsOfType(schema) {
    
    var queryParams = {
        
        query: 'apsdb.schema = "' + schema + '"',
        fields: "key"
    };
    
    var resp = document.query(queryParams);
    if (resp.metadata.status == "failure") {
         throw(JSON.stringify(resp.metadata));
    }
    
    return resp.result.documents;
}

function deleteDocumentsOfType(schema) {
    
    var list = listDocumentsOfType(schema);
    for (var i = 0; i < list.length; i++) {
        
        var resp = document.delete(list[i].key);
        if (resp.metadata.status == "failure") {
            console.log("Could not delete " +  list[i].key);
        }
    }
}

function guid(max) {

    var choice = "abcdefghijklmnopqrstuvwxyz0123456789";
    var uid = "";
    var length =  max && max <= choice.length -1 ? max : choice.length -1
    for (var i = 0; i < 15; i++) {
        uid += choice[Math.round(Math.random() * length)];
    }

    return uid;
}

function ip() {

    var a = Math.round(Math.random() * 245) + 10;
    var b = Math.round(Math.random() * 245) + 10;
    var c = Math.round(Math.random() * 245) + 10;
    var d = Math.round(Math.random() * 245) + 10;
    return a + "." + b + "." + c + "." + d;
}

function mac() {

    var mc = "";
    var alpha = "ABCDEF";
    for (var i = 1; i <=8; i++) {

        mc += alpha[Math.round(Math.random() * (alpha.length -1))] +  Math.round(Math.random() * 8);
        mc += i != 8 ? ":" : "";
    }

    return mc;
}

function structure() {
    
    const ids = ["Structure1", "Structure2", "Structure2"];
    var id = ids[Math.round(Math.random() * (ids.length - 1))];
    return id;
}