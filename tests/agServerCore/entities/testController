/**
 * Test suite of the Controller class.
 * Note: avoid doing lengthy tests (split them in multiple scripts if this is the case)
 */

var jasmine = require("/tests/modules/jasmine/boot");
var deviceManagerModule = require("/agServerCore/entities/devices/deviceManager");
var controllerModule = require("/agServerCore/entities/devices/controller");
var init = require("./init");
var util = require("/tests/util");

var deviceManager = new deviceManagerModule.DeviceManager();
var controller = null; // controller instance under testing

jasmine.describe("Testing the Controller class", function() {

    jasmine.beforeAll(function(){

        var controllerKey = init.createController();
        var data = util.getDocument(controllerKey);
        try {
            controller = new controllerModule.Controller(data, deviceManager);
        }catch(exception){
            throw(JSON.stringify(exception));
        }
    }); 

    jasmine.beforeEach(function() {

    });

    jasmine.it("controller.listCameras() returns an array of 1 Camera instances", function() {

        try {

            var list = controller.listCameras();
            jasmine.expect(list).not.toBeNull(null);
            jasmine.expect(list.length).toBe(1);
            jasmine.expect(list[0].constructor.name).toBe("Camera");
            jasmine.expect(list[0].controller).toBe(controller.id);
        }catch(exception){
        }
    });

    jasmine.it("controller.listSensorCores() returns an array of 1 SensorCore instances", function() {

        try {

            var list = controller.listSensorCores();
            jasmine.expect(list).not.toBeNull(null);
            jasmine.expect(list.length).toBe(1);
            jasmine.expect(list[0].constructor.name).toBe("SensorCore");
            jasmine.expect(list[0].controller).toBe(controller.id);
        }catch(exception){
            throw(JSON.stringify(exception));
        }
    });

    jasmine.it("controller.listSensors() returns an array of 1 Sensor instances", function() {

        try {

            var list = controller.listSensors();
            jasmine.expect(list).not.toBeNull(null);
            jasmine.expect(list.length).toBe(1);
            jasmine.expect(list[0].constructor.name).toBe("Sensor");
            jasmine.expect(list[0].controller).toBe(controller.id);
        }catch(exception){
            throw(JSON.stringify(exception));
        }
    });

    jasmine.it("controller.update() effectively updates the data in the store", function() {

        try {

            var formerMac = controller.mac_address;
            var formerIp = controller.ip_address;
            controller.mac_address = init.mac();
            controller.ip_address = init.ip();           
            controller.update();
            var updatedController = util.getDocument(controller.key);             
            jasmine.expect(updatedController.mac_address).toBe(controller.mac_address);
            jasmine.expect(updatedController.ip_address).toBe(controller.ip_address);            
        }catch(exception){
            throw(JSON.stringify(exception));
        }
    });
    
    jasmine.it("controller.addCamera() effectively adds a new camera and saves it in the store", function() {

        try {

            var cameraData = init.createCameraData(controller.key);
            var initialList = controller.listCameras(); 
            controller.addCamera(cameraData);
            var newCameraList = controller.listCameras();
            jasmine.expect(newCameraList).not.toBe(null);
            jasmine.expect(newCameraList.length).toBe(initialList.length + 1);
            var found = false;
            for (var i = 0; i < newCameraList.length && !found; i++) {
            	found = newCameraList[i].key == cameraData.key;    
            }
            
            jasmine.expect(found).toBe(true);
        }catch(exception){
            throw(JSON.stringify(exception));
        }
    });

    jasmine.afterAll(function(){        
        init.cleanup();
    });
});

jasmine.execute();